datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  hassPassword  String? 
  accounts      Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   reviews      Review[]
   blogs   Blog[]
   likes    Like[]   
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Blog{
   id        String  @id @default(auto()) @map("_id") @db.ObjectId
   userId    String  @db.ObjectId
   title  String
   category String
   content String
   images   String[] 
   reviews Review[]
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
   createdAt    DateTime @default(now())
   updatedAt DateTime @updatedAt
   author  String
   likes    Like[]  
}

model Review {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  userId          String?   @db.ObjectId
  blogId          String    @db.ObjectId
  comment         String
  createdAt       DateTime  @default(now())
  blog            Blog      @relation(fields: [blogId], references: [id])
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentReviewId  String?   @db.ObjectId
  parentReview    Review?   @relation("CommentReplies", fields: [parentReviewId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Review[]  @relation("CommentReplies")
 
}


 model Like {
  id        String @id @default(auto()) @map("_id") @db.ObjectId  
  name          String?
  createdAt DateTime @default(now())
  userId        String?  @db.ObjectId
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogId      String  @db.ObjectId
  blog      Blog     @relation(fields: [blogId], references: [id])

  @@unique([userId, blogId]) 
}




